#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end

$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
CONFIG_ROOT = File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../config')

require 'rubygems'
require 'gli'
require 'kraken_version'
require 'folders'
require 'files'
require 'yaml'

include GLI

program_desc 'kraken - mobile app framework tool'

version Kraken::VERSION


#global dry-run switch applies to all commands
desc 'Dry-run, no changes will be made to the disk'
switch [:n, 'dry-run', :dryrun]


#Command: new
desc 'Create a new project'
arg_name 'project_name'
command :new do |c|

  c.desc 'Overwrite/ignore existing files and directories'
  c.switch [:f,:force]

  c.desc 'Include support for mvc'
  c.switch [:m,:mvc]

  c.action do |global_options,options,args|
    
    if args.length < 1
      raise 'You must specify name of your new project'
    end
    
    settings = {}
    settings[:force] = options[:force]
    settings[:dryrun] = global_options[:dryrun]
    settings[:mvc] = settings['mvc'] = true if options[:mvc]
    
    root = File.expand_path(args[0])

    createFolder(root, settings)

    config = YAML.load_file("#{CONFIG_ROOT}/new.yml")
       
    createFolders( root, config['folders'], settings ){ |path_name| filterPath(path_name, settings) }
    createFiles( root, config['files'], settings){ |path_name| filterPath(path_name, settings) }

  end
end


#Command: server
desc 'Launch a web server and run app'
arg_name 'Describe arguments to server here'
command :server do |c|
  c.action do |global_options,options,args|

  end
end


#Command: generate
desc 'Create something new'
arg_name 'item'
command :generate do |c|
  c.action do |global_options,options,args|
    if args.length < 1
      raise 'You specify what it is that you want to generate'
    end

    root = File.expand_path(".")

    case args[0].downcase
    when 'folders'
      if args.length < 2
        raise 'You must supply a json hash or array of folders to create'
      end

      data = args[1]

      createFolders(root, data, options) 

    else
      raise "Don't know how to generate item: #{ args[0] }"
    end
  end
end


#Hook: pre
#   Code to run before every command. 
#   The pre hook is useful for setting up global data that most or all of your commands will need. 
pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end


#Hook: post
#   Code to run after every command that didn't experience an error.
#   The post hook is called after your command runs, assuming there has been no error.
post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end


#Hook: on_error
#   Your commands should simply raise exceptions if anything went wrong and you wish to halt program execution. 
#   The Error hook is called in these cases. 
#   The error hook is also called at any other part of the application lifecycle, 
#   so the parsed command line options may not be available. 
on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

def filterPath(path_name, settings)
    #Filter block for filtering paths before they are created.
    #Why? A folder path can have a series of tags (comma delimited) appended after a colon
    #the tags map to the switches specified on the commandline
    #so for example, if a path is appended with :mvc,jasmine then this means
    #that the folder should only be created if the mvc and jasmine switches are present 
    tags = path_name.slice!(/:(\S+)\z/, 1)
    if tags 
      tags.split(',').each {|tag| 
        if !settings[tag]
          puts "excluding path: #{ path_name }. switch '#{tag}' not specified"
          path_name = ''
        end
      }
    end
    path_name
end  

exit GLI.run(ARGV)
